generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  efiSubscriptionId  String?   @unique
  subscriptionStatus String?
  currentPeriodEnd   DateTime?
  password           String?
  pushSubscription   String?
  role               UserRole  @default(USER)
  cpf                String?   @unique
  phone_number       String?
  paymentCreatedAt   DateTime?
  efiLocationId      Int?
  qrCodeImage        String?
  qrCodeText         String?
  classCount         Int?
  classesUsed        Int?      @default(0)
  schedulingOption   String?
  accounts           Account[]
  invoices           Invoice[]
  sessions           Session[]
  payments           Payment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  externalId  String?
  description String?
  status      String
  amount      Int
  currency    String    @default("BRL")
  periodStart DateTime?
  periodEnd   DateTime?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([externalId])
}

enum UserRole {
  USER
  ADMIN
}

// Store individual payment attempts across methods (pix, card, boleto)
model Payment {
  id            String   @id @default(cuid())
  userId        String
  provider      String   @default("efi")
  method        String   // 'pix' | 'card' | 'boleto'
  externalId    String   // PIX txid or numeric charge_id as string
  status        String   // 'PENDING' | 'PAID' | 'EXPIRED' | 'CANCELLED' | 'FAILED'
  amount        Int      // in cents
  currency      String   @default("BRL")
  // PIX specifics
  pixLocationId Int?
  pixQrImage    String?
  pixQrText     String?
  // Boleto specifics
  boletoLink    String?
  boletoPdfUrl  String?
  boletoBarcode String?
  // Card specifics
  cardBrand     String?
  cardLast4     String?
  paymentUrl    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([externalId])
}
