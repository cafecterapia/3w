'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { StepDot, Divider } from './components/ui';
import { IdentifyForm, IdentifyFormValues } from './components/IdentifyForm';
import { MethodSelector } from './components/MethodSelector';
import { PixPaymentPanel } from './components/PixPaymentPanel';
import { CardPaymentPanel } from './components/CardPaymentPanel';
import { BoletoPaymentPanel } from './components/BoletoPaymentPanel';

import { usePaymentState } from './hooks/usePaymentState';
import { usePaymentData } from './hooks/usePaymentData';
import { usePaymentNavGuard } from './hooks/usePaymentNavGuard';
import { usePaymentPolling } from './hooks/usePaymentPolling';

interface PaymentConfirmationProps {
  txid: string;
}

export default function PaymentConfirmation({ txid }: PaymentConfirmationProps) {
  const router = useRouter();
  const state = usePaymentState(txid);
  
  // Profile form state
  const [initialName, setInitialName] = useState('');
  const [initialCpf, setInitialCpf] = useState('');
  const [initialPhone, setInitialPhone] = useState('');

  const { sessionStatus, isPending, createPaymentFromProfile, cancelPayment } = usePaymentData({
    state,
    onProfileUpdate: (name, cpf, phone) => {
      setInitialName(name);
      setInitialCpf(cpf);
      setInitialPhone(phone);
    },
  });

  // Navigation guard - only active during payment phase
  const { goTo } = usePaymentNavGuard({
    isActive: state.phase === 'pay' && state.paymentStatus === 'pending',
    onCancel: cancelPayment,
  });

  // Polling - only active during payment phase
  usePaymentPolling({
    txid: state.currentTxid,
    isActive: state.phase === 'pay' && state.paymentStatus === 'pending',
    method: state.selectedMethod,
    onStatusChange: (status) => {
      state.setPaymentStatus(status);
      // Clear state on any terminal status
      state.clearState();
    },
    onError: state.setError,
    onCancel: cancelPayment,
  });

  // Save state on significant changes
  useEffect(() => {
    state.saveState();
  }, [state.phase, state.selectedMethod, state.paymentStatus]);

  // Clear state on terminal statuses
  useEffect(() => {
    if (state.paymentStatus !== 'pending') {
      state.clearState();
    }
  }, [state.paymentStatus]);

  const handleIdentifySubmit = async (values: IdentifyFormValues) => {
    if (!state.requiresProfile) {
      // Simple profile update without creating payment
      state.setError(null);
      try {
        await fetch('/api/profile/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: values.name,
            cpf: values.cpf,
            phone_number: values.phone_number,
          }),
        });
      } catch {
        // ignore non-critical
      }
      setInitialName(values.name);
      setInitialCpf(values.cpf);
      setInitialPhone(values.phone_number);
      state.setPhase('method');
      return;
    }

    // Create payment from profile
    try {
      await createPaymentFromProfile(txid, values.name, values.cpf);
      // Update profile as well
      try {
        await fetch('/api/profile/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: values.name,
            cpf: values.cpf,
            phone_number: values.phone_number,
          }),
        });
      } catch {}
      setInitialName(values.name);
      setInitialCpf(values.cpf);
      setInitialPhone(values.phone_number);
    } catch (err) {
      // Error already set by createPaymentFromProfile
    }
  };

  const handleMethodSelect = (method: typeof state.selectedMethod) => {
    state.setSelectedMethod(method);
    
    if (method === 'pix') {
      state.setPhase('pay');
    } else if (method === 'credit') {
      state.setPhase('pay');
    } else if (method === 'boleto') {
      state.setPhase('pay');
      // Create boleto
      fetch('/api/payments/create-boleto', { method: 'POST' })
        .then(async (res) => {
          if (!res.ok) throw new Error('Falha ao criar boleto.');
          const data = await res.json();
          if (data.success) {
            state.setPaymentData({
              kind: 'boleto',
              chargeId: data.chargeId,
              billetLink: data.billetLink,
              billetPdfUrl: data.billetPdfUrl,
              barcode: data.barcode,
            });
            state.setCurrentTxid(data.chargeId);
            const newUrl = `${window.location.pathname}?txid=${data.chargeId}`;
            window.history.replaceState({}, '', newUrl);
          } else {
            state.setError(data.message || 'Erro ao criar boleto.');
          }
        })
        .catch((err) => {
          console.error(err);
          state.setError('Erro ao criar boleto.');
        });
    }
  };

  const handleCancel = async () => {
    await cancelPayment();
    state.setPaymentStatus('cancelled');
    state.clearState();
    goTo('/billing');
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      state.setCopySuccess(true);
      setTimeout(() => state.setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      try {
        document.execCommand('copy');
        state.setCopySuccess(true);
        setTimeout(() => state.setCopySuccess(false), 2000);
      } catch (fallbackErr) {
        console.error('Fallback copy failed:', fallbackErr);
        alert('Não foi possível copiar automaticamente. Copie manualmente a chave PIX.');
      }
      document.body.removeChild(textArea);
    }
  };

  // Loading state
  if (sessionStatus === 'loading') {
    return (
      <div className="flex flex-col items-center gap-4">
        <div className="relative h-10 w-10">
          <span className="absolute inset-0 rounded-full border-2 border-gray-200"></span>
          <span className="absolute inset-0 rounded-full border-2 border-primary border-t-transparent animate-spin"></span>
        </div>
        <p className="text-sm text-gray-600">Carregando informações do pagamento...</p>
      </div>
    );
  }

  // Unauthenticated state
  if (sessionStatus === 'unauthenticated') {
    return (
      <div className="mx-auto max-w-lg">
        <div className="rounded-lg border bg-gray-50 p-4">
          <div className="flex items-start gap-3">
            <svg className="h-5 w-5 text-gray-900" viewBox="0 0 24 24" fill="none">
              <path
                d="M12 9v4m0 4h.01M10.29 3.86l-7.5 12.99A2 2 0 004.5 20h15a2 2 0 001.71-3.15l-7.5-12.99a2 2 0 00-3.42 0z"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <div>
              <p className="text-sm text-gray-900">
                Sessão expirada. Faça login novamente para continuar.
              </p>
            </div>
          </div>
        </div>
        <div className="mt-6">
          <button
            onClick={() => router.push('/login')}
            className="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-secondary hover:opacity-90"
          >
            Fazer Login
          </button>
        </div>
      </div>
    );
  }

  // Error state (except for paid status)
  if (state.error && state.paymentStatus !== 'paid') {
    return (
      <div className="mx-auto max-w-lg">
        <div className="rounded-lg border bg-gray-50 p-4">
          <div className="flex items-start gap-3">
            <svg className="h-5 w-5 text-gray-900" viewBox="0 0 24 24" fill="none">
              <path
                d="M12 9v4m0 4h.01M10.29 3.86l-7.5 12.99A2 2 0 004.5 20h15a2 2 0 001.71-3.15l-7.5-12.99a2 2 0 00-3.42 0z"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <div>
              <p className="text-sm text-gray-900">{state.error}</p>
            </div>
          </div>
        </div>
        <div className="mt-6">
          <button
            onClick={() => router.push('/billing')}
            className="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-secondary hover:opacity-90"
          >
            Voltar para Faturamento
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="mx-auto w-full max-w-3xl">
      {/* Progress header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <StepDot active={state.phase === 'identify'} done={state.phase !== 'identify'}>
            Identificação
          </StepDot>
          <Divider />
          <StepDot active={state.phase === 'method'} done={state.phase === 'pay'}>
            Método
          </StepDot>
          <Divider />
          <StepDot active={state.phase === 'pay'} done={state.paymentStatus === 'paid'}>
            Pagamento
          </StepDot>
        </div>
        <h1 className="mt-6 text-2xl font-semibold tracking-tight">
          Finalize seu pagamento
        </h1>
        <p className="mt-1 text-sm text-gray-600">
          Complete seus dados, escolha o método e confirme sua assinatura.
        </p>
      </div>

      {/* Card container */}
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        {/* Left: profile completion */}
        <div className="lg:col-span-1 space-y-6">
          <div className="rounded-lg border bg-card p-4">
            <div className="mb-3 flex items-center gap-2 justify-between">
              <div className="flex items-center gap-2">
                <svg className="h-4 w-4 text-gray-900" viewBox="0 0 24 24" fill="none">
                  <path
                    d="M12 12c2.761 0 5-2.239 5-5S14.761 2 12 2 7 4.239 7 7s2.239 5 5 5zM4 22a8 8 0 0116 0"
                    stroke="currentColor"
                    strokeWidth="1.5"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <h2 className="text-sm font-medium">Informações pessoais</h2>
              </div>
              {state.phase !== 'identify' && (
                <button
                  type="button"
                  onClick={() => state.setPhase('identify')}
                  className="text-xs underline text-gray-900 hover:opacity-80"
                >
                  Editar
                </button>
              )}
            </div>
            <IdentifyForm
              initialName={initialName}
              initialCpf={initialCpf}
              initialPhone={initialPhone}
              disabled={state.phase !== 'identify'}
              error={state.error}
              isPending={isPending}
              onSubmit={handleIdentifySubmit}
              showHeader={false}
            />
          </div>

          {/* Meta info with responsive txid */}
          <div className="rounded-lg border bg-card p-4">
            <div className="flex items-start justify-between gap-3 text-sm">
              <span className="shrink-0 text-gray-600">ID da Transação</span>
              <span className="flex-1 font-mono text-gray-900 break-all text-right md:truncate">
                {state.currentTxid}
              </span>
            </div>
          </div>
        </div>

        {/* Right: unified card with method + pay + result */}
        <div className="lg:col-span-2">
          <MethodSelector
            selected={state.selectedMethod}
            disabled={state.phase === 'identify'}
            onSelect={handleMethodSelect}
          >
            {/* Inner content area */}
            <div className={`mt-4 border-t pt-4 ${state.phase === 'method' ? 'opacity-60' : ''}`}>
              {/* Method selection placeholder */}
              {state.phase === 'method' && (
                <div className="flex h-full flex-col items-center justify-center text-center py-10">
                  <svg className="h-10 w-10 text-gray-900" viewBox="0 0 24 24" fill="none">
                    <path
                      d="M12 6v12M6 12h12"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                    />
                  </svg>
                  <h3 className="mt-3 text-base font-medium">Selecione o método</h3>
                  <p className="mt-1 max-w-sm text-sm text-gray-600">
                    Escolha como deseja realizar o pagamento para avançar.
                  </p>
                </div>
              )}

              {/* Payment panels */}
              {state.phase === 'pay' && state.paymentStatus === 'pending' && (
                <>
                  {state.selectedMethod === 'pix' && (
                    <PixPaymentPanel
                      paymentData={state.paymentData?.kind === 'pix' ? state.paymentData : null}
                      copySuccess={state.copySuccess}
                      onCopy={copyToClipboard}
                      onCancel={handleCancel}
                      paymentStatus={state.paymentStatus}
                    />
                  )}

                  {state.selectedMethod === 'credit' && (
                    <CardPaymentPanel
                      paymentData={state.paymentData?.kind === 'card' ? state.paymentData : null}
                      onCancel={handleCancel}
                      paymentStatus={state.paymentStatus}
                      onCreated={({ chargeId, paymentUrl }) => {
                        state.setPaymentData({ kind: 'card', chargeId, paymentUrl });
                        state.setCurrentTxid(chargeId);
                        const newUrl = `${window.location.pathname}?txid=${chargeId}`;
                        window.history.replaceState({}, '', newUrl);
                      }}
                    />
                  )}

                  {state.selectedMethod === 'boleto' && (
                    <BoletoPaymentPanel
                      paymentData={state.paymentData?.kind === 'boleto' ? state.paymentData : null}
                      onCancel={handleCancel}
                      paymentStatus={state.paymentStatus}
                    />
                  )}
                </>
              )}

              {/* Success state */}
              {state.paymentStatus === 'paid' && (
                <div className="text-center py-10">
                  <div className="mb-4 inline-flex h-16 w-16 items-center justify-center rounded-full bg-gray-100">
                    <svg className="h-8 w-8 text-gray-900" viewBox="0 0 24 24" fill="none">
                      <path
                        d="M20 7L9 18l-5-5"
                        stroke="currentColor"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold tracking-tight">
                    Obrigado pelo pagamento!
                  </h3>
                  <p className="mt-1 text-sm text-gray-600">
                    Sua assinatura foi ativada com sucesso.
                  </p>
                  <div className="mt-4 rounded-lg border bg-gray-50 px-3 py-2 text-left w-full">
                    <div className="flex w-full items-start justify-between gap-3 text-sm">
                      <span className="shrink-0 text-gray-600">ID</span>
                      <span className="flex-1 font-mono text-gray-900 break-all md:truncate text-left">
                        {state.currentTxid}
                      </span>
                    </div>
                  </div>
                  <div className="mt-6">
                    <button
                      onClick={() => {
                        state.clearState();
                        router.push('/billing?success=true');
                      }}
                      className="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-secondary hover:opacity-90"
                    >
                      Continuar
                    </button>
                  </div>
                </div>
              )}

              {/* Expired state */}
              {state.paymentStatus === 'expired' && (
                <div className="text-center py-10">
                  <div className="mb-4 inline-flex h-16 w-16 items-center justify-center rounded-full bg-gray-100">
                    <svg className="h-8 w-8 text-gray-900" viewBox="0 0 24 24" fill="none">
                      <path
                        d="M6 18L18 6M6 6l12 12"
                        stroke="currentColor"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold tracking-tight">Pagamento expirado</h3>
                  <p className="mt-1 text-sm text-gray-600">
                    O tempo para concluir o pagamento foi excedido.
                  </p>
                  <div className="mt-6">
                    <button
                      onClick={() => {
                        state.clearState();
                        router.push('/billing');
                      }}
                      className="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-secondary hover:opacity-90"
                    >
                      Voltar ao faturamento
                    </button>
                  </div>
                </div>
              )}

              {/* Cancelled state */}
              {state.paymentStatus === 'cancelled' && (
                <div className="text-center py-10">
                  <div className="mb-4 inline-flex h-16 w-16 items-center justify-center rounded-full bg-gray-100">
                    <svg className="h-8 w-8 text-gray-900" viewBox="0 0 24 24" fill="none">
                      <path
                        d="M6 18L18 6M6 6l12 12"
                        stroke="currentColor"
                        strokeWidth="1.5"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  </div>
                  <h3 className="text-xl font-semibold tracking-tight">Pagamento cancelado</h3>
                  <p className="mt-1 text-sm text-gray-600">
                    Você pode tentar novamente quando desejar.
                  </p>
                  <div className="mt-6">
                    <button
                      onClick={() => {
                        state.clearState();
                        router.push('/billing');
                      }}
                      className="inline-flex items-center justify-center rounded-md bg-primary px-4 py-2 text-sm font-medium text-secondary hover:opacity-90"
                    >
                      Continuar
                    </button>
                  </div>
                </div>
              )}
            </div>
          </MethodSelector>
        </div>
      </div>
    </div>
  );
}
